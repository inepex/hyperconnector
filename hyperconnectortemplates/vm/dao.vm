outpath:${class.workspaceRelativePath}dao/${classname}Dao.java
#parse('_inc.entityparser.vm')
package ${package}.dao;

import com.inepex.hyperconnector.dao.HyperDao;
import com.inepex.hyperconnector.dao.bottom.BottomLevelDaoImpl;
import com.inepex.hyperconnector.thrift.HyperPoolArgs;
import com.inepex.hyperconnector.dao.dumpeddao.DumpedDao;

import ${package}.${classname};
import ${package}.mapper.${classname}Mapper;

public class ${classname}Dao extends HyperDao<${classname}> {
	
	public static final String namespace = "$hyperEntityNamespace";
	public static final String table = "$hyperEntityTable";

##generate the necessary variables from the columns list
#foreach($column in $sortTool.sort( $m_cellSpecProperties.keySet() ))
	protected static final String column_${column} = "${column}";
#end

##generate the first column and last column variables, what is necessary for the proper selects
#foreach($column in $sortTool.sort( $m_cellSpecProperties.keySet() ))
	#if(${foreach.count} == 1)
	protected static final String firstColumn = "${column}";
	#end
	#if(!${foreach.hasNext})
	protected static final String lastColumn = "${column}";
	#end
#end

##check is the class has ValueMap or ValueList
#if ($hasCollection)
	protected static final String column_HyperConnector_Collections = HyperConstants.collectionColumnFamily;
#end 

#if(${class.annotations.get("HyperEntity").getParamBoolean("dumped")})
	//be sure, that only one instance exists of HyperDumper
	public ${classname}Dao(HyperPoolArgs hyperClientPoolArgs, HyperDumper hyperDumper) {
		super(new DumpedDao(hyperDumper, new BottomLevelDaoImpl(hyperClientPoolArgs, namespace, table)),
				new ${classname}Mapper());
	}
#else
	public ${classname}Dao(HyperPoolArgs hyperPoolArgs) {
		super(new BottomLevelDaoImpl(hyperClientPoolArgs, namespace, table),
			  new ${classname}Mapper());
	}
#end
	
}
	