outpath:${class.workspaceRelativePath}dao/${classname}Dao.java
#parse('_inc.entityparser.vm')
package ${package}.dao;

import org.hypertable.thriftgen.CellInterval;
import org.hypertable.thriftgen.ScanSpec;

import java.util.ArrayList;
import java.util.List;

import com.inepex.hyperconnector.HyperConstants;
import com.inepex.hyperconnector.dao.HyperDaoBase;
import com.inepex.hyperconnector.dao.HyperOperationException;
import com.inepex.hyperconnector.thrift.HyperPoolArgs;
import com.inepex.hyperconnector.mapper.HyperMappingException;
import ${package}.${classname};
import ${package}.mapper.${classname}Mapper;

public class ${classname}Dao extends HyperDaoBase {
	public static final String namespace = "$hyperEntityNamespace";
	public static final String table = "$hyperEntityTable";

##generate the necessary variables from the columns list
#foreach($column in $sortTool.sort( $m_cellSpecProperties.keySet() ))
	protected static final String column_${column} = "${column}";
#end

##generate the first column and last column variables, what is necessary for the proper selects
#foreach($column in $sortTool.sort( $m_cellSpecProperties.keySet() ))
	#if(${foreach.count} == 1)
	protected static final String firstColumn = "${column}";
	#end
	#if(!${foreach.hasNext})
	protected static final String lastColumn = "${column}";
	#end
#end

##check is the class has ValueMap or ValueList
#if ($hasCollection)
	protected static final String column_HyperConnector_Collections = HyperConstants.collectionColumnFamily;
#end

	protected ${classname}Mapper mapper = new ${classname}Mapper();

	public ${classname}Dao(HyperPoolArgs hyperPoolArgs) {
		super(hyperPoolArgs);
	}
	
	@Override
	public String getNamespace() {
		return namespace;
	}

	@Override
	public String getTable() {
		return table;
	}
	
	public void insert(${classname} hyperEntity) throws HyperOperationException, HyperMappingException {
#if($isSingleCell)
		insert(mapper.hyperEntityToCell(hyperEntity));
#else
		insert(mapper.hyperEntityToCellList(hyperEntity));
#end
	}

	public void insertList(List<${classname}> hyperEntityList) throws HyperOperationException {
		insert(mapper.hyperEntityListToCellList(hyperEntityList));
	}
	
	private ScanSpec getScanSpec_All() {
		ScanSpec ss = new ScanSpec();
		List<CellInterval> cis = new ArrayList<CellInterval>();
		ss.cell_intervals = cis;
		return ss;
	}
	
	public List<${classname}> selectAll() throws HyperOperationException {
		return mapper.cellListToHyperEntityList(select(getScanSpec_All()));
	}
	
	public void deleteAll() throws HyperOperationException {
		delete(getScanSpec_All());
	}
	
##COMPLEX SELECT SPECSPECS NOT IMPLEMENTED YET
##getScanSpec_...
}
	